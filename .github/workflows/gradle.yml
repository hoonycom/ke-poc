# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Build executable
      run: chmod +x ./gradlew
      
    - name: Build executable jar file
      run: ./gradlew clean assemble
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-northeast-2'
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        CONTAINER_IMAGE_TEMP_PATH=$(mktemp -d)
        cp build/libs/*.jar ${CONTAINER_IMAGE_TEMP_PATH}
        docker build -f ./Dockerfile -t ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} ${CONTAINER_IMAGE_TEMP_PATH}
        docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}
